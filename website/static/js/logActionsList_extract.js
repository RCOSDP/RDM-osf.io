//Make the sentence correspond with 'logActionsList.json' for i18n
var _ = require('js/rdmGettext')._;
var project_created = _('${user} created ${node}');
var project_registered = _('${user} registered ${node}');
var project_registered_no_user = _('${node} registered');
var prereg_registration_initiated = _('${user} submitted for review to the Preregistration Challenge a registration of ${node}');
var project_deleted = _('${user} deleted ${node}');
var created_from = _('${user} created ${node} based on ${template}');
var pointer_created = _('${user} created a link to ${pointer_category} ${pointer}');
var pointer_forked = _('${user} forked a link to ${pointer_category} ${pointer}');
var pointer_removed = _('${user} removed a link to ${pointer_category} ${pointer}');
var group_added = _('${user} added ${group} to ${node}');
var group_removed = _('${user} removed ${group} from ${node}');
var group_updated = _('${user} changed ${group} permissions to ${node}');
var made_public = _('${user} made ${node} public');
var made_public_no_user = Â _('${node} made public');
var made_private = _('${user} made ${node} private');
var tag_added = _('${user} added tag ${tag} to ${node}');
var tag_removed = _('${user} removed tag ${tag} from ${node}');
var edit_title = _('${user} changed the title from ${title_original} to ${title_new}');
var edit_description = _('${user} edited description of ${node}');
var updated_fields = _('${user} changed the ${updated_fields} for ${node}');
var external_ids_added = _('${user} created external identifier(s) ${identifiers} on ${node}');
var custom_citation_added = _('${user} created a custom citation for ${node}');
var custom_citation_edited = _('${user} edited a custom citation for ${node}');
var custom_citation_removed = _('${user} removed a custom citation for ${node}');
var contributor_added = _('${user} added ${contributors} as contributor(s) to ${node}');
var contributor_removed = _('${user} removed ${contributors} as contributor(s) from ${node}');
var contributors_reordered = _('${user} reordered contributors for ${node}');
var permissions_updated = _('${user} changed permissions for ${node}');
var made_contributor_visible = _('${user} made non-bibliographic contributor ${contributors} a bibliographic contributor on ${node}');
var made_contributor_invisible = _('${user} made bibliographic contributor ${contributors} a non-bibliographic contributor on ${node}');
var wiki_updated = _('${user} updated wiki page ${page} to version ${version} of ${node}');
var wiki_deleted = _('${user} deleted wiki page ${page} of ${node}');
var wiki_renamed = _('${user} renamed wiki page ${old_page} to ${page} of ${node}');
var made_wiki_public = _('${user} made the wiki of ${node} publicly editable');
var made_wiki_private = _('${user} made the wiki of ${node} privately editable');
var addon_added = _('${user} added addon ${addon} to ${node}');
var addon_removed = _('${user} removed addon ${addon} from ${node}');
var addon_file_moved = _('${user} moved ${source} to ${destination} in ${node}');
var addon_file_copied = _('${user} copied ${source} to ${destination} in ${node}');
var addon_file_renamed = _('${user} renamed ${source} to ${destination} in ${node}');
var folder_created = _('${user} created a folder in ${node}');
var file_added = _('${user} added file ${path} to ${node}');
var file_updated = _('${user} updated file in ${node}');
var file_removed = _('${user} removed ${path_type} ${path} from ${node}');
var file_restored = _('${user} restored file ${path} from ${node}');
var file_metadata_updated = _('${user} updated the file metadata for ${path}');
var checked_out = _('${user} checked out ${kind} ${path} from ${node}');
var checked_in = _('${user} checked in ${kind} ${path} to ${node}');
var comment_added = _('${user} added a comment ${comment_location} in ${node}');
var comment_removed = _('${user} deleted a comment ${comment_location} in ${node}');
var comment_restored = _('${user} restored a comment ${comment_location}  in ${node}');
var comment_updated = _('${user} updated a comment ${comment_location} in ${node}');
var embargo_initiated = _('${user} initiated an embargoed registration of ${node}');
var embargo_approved = _('${user} approved embargoed registration of ${node}');
var embargo_approved_no_user = _('Embargo of registration of ${node} approved');
var embargo_cancelled = _('${user} cancelled embargoed registration of ${node}');
var embargo_completed = _('${user} completed embargo of ${node}');
var embargo_completed_no_user = _('Embargo for ${node} completed');
var embargo_terminated = _('Embargo for ${node} ended');
var retraction_initiated = _('${user} initiated withdrawal of registration of ${node}');
var retraction_initiated_no_user = _('A withdrawal of registration of ${node} is proposed');
var retraction_approved = _('${user} approved withdrawal of registration of ${node}');
var retraction_cancelled = _('${user} cancelled withdrawal of registration of ${node}');
var registration_initiated = _('${user} initiated registration of ${node}');
var registration_approved = _('${user} approved registration of ${node}');
var registration_approved_no_user = _('Registration of ${node} approved');
var registration_cancelled = _('${user} cancelled registration of ${node}');
var node_created = _('${user} created ${node}');
var node_forked = _('${user} created fork from ${forked_from}');
var node_removed = _('${user} removed ${node}');
var node_access_requests_enabled = _('${user} enabled access requests for ${node}');
var node_access_requests_disabled = _('${user} disabled access requests for ${node}');
var license_changed = _('${user} updated the license of ${node} ${license}');
var file_tag_added = _('${user} added tag ${tag} to ${path} in ${storage_name} in ${node}');
var file_tag_removed = _('${user} removed tag ${tag} from ${path} in ${storage_name} in ${node}');
var osf_storage_file_added = _('${user} added file ${path} to ${storage_name} in ${node}');
var osf_storage_folder_created = _('${user} created folder ${path} in ${storage_name} in ${node}');
var osf_storage_file_updated = _('${user} updated file ${path} in ${storage_name} in ${node}');
var osf_storage_file_removed = _('${user} removed ${path_type} ${path} from ${storage_name} in ${node}');
var affiliated_institution_added = _('${user} added ${institution} affiliation to ${node}');
var affiliated_institution_removed = _('${user} removed ${institution} affiliation from ${node}');
var preprint_initiated = _('${user} made ${node} a ${preprint} on ${preprint_provider} Preprints');
var preprint_file_updated = _('${user} updated the primary file of this ${preprint} on ${preprint_provider} Preprints');
var preprint_license_updated = _('${user} updated the license of this ${preprint} on ${preprint_provider} Preprints ${license}');
var subjects_updated = _('${user} updated the subjects on ${node} to ${subjects}');
var view_only_link_added = _('${user} created ${anonymous_link} view-only link to ${node}');
var view_only_link_removed = _('${user} removed ${anonymous_link} view-only link to ${node}');
var mapcore_map_group_not_created = _('[MAPCORE_SYNC:ERROR] ${user} cannot create a new mAP group for GRDM project <${node}> (See logs for details)');
var mapcore_map_group_not_updated = _('[MAPCORE_SYNC:ERROR] mAP group for GRDM project <${node}> cannot be updated (See logs for details)');
var mapcore_rdm_project_not_updated = _('[MAPCORE_SYNC:ERROR] GRDM project <${node}> cannot be updated with mAP group (See logs for details)');
var mapcore_rdm_unknown_user = _('[MAPCORE_SYNC:NOTICE] Unknown (unregistered in GRDM) users belong to mAP group <${node}> (ignored) (See logs for details)');

