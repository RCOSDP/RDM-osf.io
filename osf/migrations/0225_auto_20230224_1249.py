# -*- coding: utf-8 -*-
# Generated by Django 1.11.28 on 2023-02-24 12:49
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import osf.models.base
import logging
from osf.models.storage import StorageType
from api.base import settings as api_settings


logger = logging.getLogger(__name__)

def move_quota_from_user_quota_table(apps, schema_editor):
    UserQuota = apps.get_model('osf', 'UserQuota')
    UserStorageQuota = apps.get_model('osf', 'UserStorageQuota')
    Region = apps.get_model('addons_osfstorage.region')
    OSFUser = apps.get_model('osf.OSFUser')

    for user in OSFUser.objects.all():
        # Handle for case has multiple record in database
        latest_nii_storage_quota = UserQuota.objects.filter(user=user, storage_type=StorageType.NII_STORAGE).order_by('-modified').first()
        latest_custom_storage_quota = UserQuota.objects.filter(user=user, storage_type=StorageType.CUSTOM_STORAGE).order_by('-modified').first()
        if latest_nii_storage_quota:
            # Update storage_type = 1 quota
            UserStorageQuota.objects.create(
                user=user,
                region_id=api_settings.NII_STORAGE_REGION_ID,
                max_quota=latest_nii_storage_quota.max_quota,
                used=latest_nii_storage_quota.used
            )

        if latest_custom_storage_quota:
            # Update storage_type = 2 quota
            institution = user.affiliated_institutions.first()
            if not institution:
                continue
            else:
                region = Region.objects.filter(_id=institution._id).first()
                if not region:
                    logger.warn(f'The institution "{institution._id}" do not have any region')
                else:
                    UserStorageQuota.objects.create(
                        user=user,
                        region_id=region.id,
                        max_quota=latest_custom_storage_quota.max_quota,
                        used=latest_custom_storage_quota.used
                    )


def noop(*args):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('addons_osfstorage', '0006_rename_deleted_field'),
        ('osf', '0224_ensure_schema_and_reports'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserStorageQuota',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('max_quota', models.IntegerField(default=0)),
                ('used', models.BigIntegerField(default=0)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='addons_osfstorage.Region')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.AlterUniqueTogether(
            name='userstoragequota',
            unique_together=set([('user', 'region')]),
        ),
        migrations.RunPython(move_quota_from_user_quota_table, noop)
    ]
